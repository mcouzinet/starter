



// ==========================================================================
// GRADIENT
// ==========================================================================

@mixin gradient( $direction, $values... ) {
    background: nth($values, 1);
    background: -webkit-linear-gradient($direction, $values);
    background: linear-gradient($direction, $values);
}




// ==========================================================================
// BORDER RADIUS
// ==========================================================================

@mixin borderRadius( $radius ) {
    border-radius: $radius;
}




// ==========================================================================
// BOX SHADOW
// ==========================================================================

@mixin boxShadow( $values... ) {
    box-shadow: $values;
}

@mixin noBoxShadow {
    box-shadow: none;
}




// ==========================================================================
// TEXT SHADOW
// ==========================================================================

@mixin textShadow( $values... ) {
    text-shadow: $values;
}

@mixin noTextShadow {
    text-shadow: none;
}




// ==========================================================================
// FILTER
// ==========================================================================

@mixin filter( $values... ) {
    -webkit-filter: $values;
    -moz-filter: $values;
    filter: $values;
}

@mixin blur( $value ) {
    @include filter( blur( $value ) );
}

@mixin grayscale( $value ) {
    @include filter( grayscale( $value ) );
}

@mixin sepia( $value ) {
    @include filter( sepia( $value ) );
}

@mixin brightness( $value ) {
    @include filter( brightness( $value ) );
}

@mixin contrast( $value ) {
    @include filter( contrast( $value ) );
}

@mixin hue( $value ) {
    @include filter( hue-rotate( $value ) );
}

@mixin invert( $value ) {
    @include filter( invert( $value ) );
}

@mixin saturate( $value ) {
    @include filter( saturate( $value ) );
}




// ==========================================================================
// TRANSITION
// ==========================================================================

@mixin transition( $values... ) {
    $transitions: ();

    @each $declaration in $values {

        @if $declaration == default {
            $declaration: all .2s;
        }

        $prop: nth($declaration, 1);
        $prop-opts: ();
        $length: length($declaration);

        @for $i from 2 through $length {
            $prop-opts: append($prop-opts, nth($declaration, $i));
        }

        $trans: ($prop, $prop-opts);
        $transitions: append($transitions, $trans, comma);
    }

    -webkit-transition: trans-prefix($transitions, webkit);
    -moz-transition: trans-prefix($transitions, moz);
    transition: $values;
}

@mixin noTransition {
    -webkit-transition: none !important;
    -moz-transition: none !important;
    transition: none !important;
}




// ==========================================================================
// ANIMATION
// ==========================================================================

@mixin animation( $value ) {
    @warn $value;
    -webkit-animation: $value;
    animation: $value;
}

@mixin keyframe( $name ) {
    @-webkit-keyframes $name {
        @content;
    }

    @-moz-keyframes $name {
        @content;
    }

    @-keyframes $name {
        @content;
    }
}




// ==========================================================================
// TRANSFORM
// ==========================================================================

@mixin transform( $val ) {
    -webkit-transform:$val;
    -ms-transform:$val;
    transform:$val;
}

@mixin translate( $x, $y ) {
    @include transform( translate( $x, $y ) );
}

@mixin translate3D( $x, $y, $z ) {
    @include transform( translate3d( $x, $y, $z ) );
}

@mixin scale( $ratio ) {
    @include transform( scale( $ratio ) );
}

@mixin rotate( $deg ) {
    @include transform( rotate( $deg ) );
}




// ==========================================================================
// OPACITY
// ==========================================================================

@mixin opacity( $value ) {
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="$value * 100")";
    filter: alpha(opacity= $value * 100 );
    zoom: 1;
}




// ==========================================================================
// FONT FACE
// ==========================================================================

@mixin fontFace( $name, $path : false, $weight : false, $svgid : false ) {

    @if $svgid == false {
        $svgid : $name;
    }

    @if $path == false {
        $path : $name;
    }

    @font-face{
        font-family : $name;

        src : url('/assets/fonts/#{$path}.eot');
        src : url('/assets/fonts/#{$path}.eot?') format('eot'),
              url('/assets/fonts/#{$path}.woff') format('woff'),
              url('/assets/fonts/#{$path}.svg##{$svgid}') format('svg'),
              url('/assets/fonts/#{$path}.ttf') format('truetype');

        @if $weight != false {
            font-weight: $weight;
        }
    }
}




// ==========================================================================
// ELLIPSIS : TRUNCATE TEXTE
// ==========================================================================

@mixin ellipsis {
    @extend .ellipsis;
}




// ==========================================================================
// HIDE TEXTE
// ==========================================================================

@mixin hideText {
    @extend .hideText;
}




// ==========================================================================
// BOX SIZING
// ==========================================================================

@mixin boxSizing( $value: border-box ) {
    -webkit-box-sizing: $value;
    -moz-box-sizing: $value;
    box-sizing: $value;
}




// ==========================================================================
// MEDIA QUERIES
// ==========================================================================

@mixin media( $value : false, $orientation : false, $operator: 'min-width', $type : false ) {

    $orientation-properties: portrait landscape;
    $type-properties : screen handheld print aural speech braille embossed projection tty tv all;


    @if index( $orientation-properties, $value ) {
        $orientation : $value;
        $value : false;
    }


    @if index( $type-properties, $value ) {
        $type : $value;
        $value : false;
    }



    @if $type != false {

        @if $orientation != false and $operator != false and $value != false {
            @media #{$type} and ( #{$operator} : #{$value} ) and ( orientation: #{$orientation} ) { @content; }

        } @else if $orientation != false and ( $operator == false or $value == false ) {
            @media #{$type} and  ( orientation : #{$orientation} ) { @content; }

        } @else if $operator != false and $value != false {
            @media #{$type} and ( #{$operator} : #{$value} ) { @content; }

        } @else {
            @media #{$type} { @content; }
        }

    } @else {

        @if $orientation != false and $operator != false and $value != false {
            @media ( #{$operator} : #{$value} ) and ( orientation: #{$orientation} ) { @content; }

        } @else if $orientation != false and ( $operator == false or $value == false ) {
            @media ( orientation : #{$orientation} ) { @content; }

        } @else if $operator != false and $value != false {
            @media ( #{$operator} : #{$value} ) { @content; }

        }

    }

}




// ==========================================================================
// CLEARFIX
// ==========================================================================

@mixin clearfix {
    @extend .clearfix;
}




// ==========================================================================
// COLUMN
// ==========================================================================

@mixin column( $count : 3, $gap : 30px, $width : false, $rule : false ) {

    @if $count != false {
        -webkit-column-count: $count;
        -moz-column-count: $count;
        column-count: $count;
    }

    @if $gap != false {
        -webkit-column-gap: $gap;
        -moz-column-gap: $gap;
        column-gap: $gap;
    }

    @if $width != false {
        -webkit-column-width: $width;
        -moz-column-width: $width;
        column-width: $width;
    }

    @if $rule != false {
        -webkit-column-rule: $rule;
        -moz-column-rule: $rule;
        column-rule: $rule;
    }

}




// ==========================================================================
// TRIANGLE
// ==========================================================================

@mixin triangle( $directions, $sizes, $color, $style : solid ) {
    $width : 0 0 0 0;
    $colors : transparent transparent transparent transparent;

    $w : null;
    $h : null;

    $i : 0;
    @each $s in $sizes {
        @if $i == 0 { $w : $s; }
        @else { $h : $s; }
        $i : $i + 1;
    }
    @if $h == null {
        $h : $w;
    }


    @if $directions == top {
        $width : 0 $w/2 $h $w/2;
        $colors : transparent transparent $color transparent;
    }

    @else if $directions == (top right) or $directions == (right top) {
        $width : 0 $w $h 0;
        $colors : transparent $color transparent transparent;
    }

    @else if $directions == right {
        $width : $h/2 0 $h/2 $w;
        $colors : transparent transparent transparent $color;
    }

    @else if $directions == (bottom right) or $directions == (right bottom) {
        $width : 0 0 $h $w;
        $colors : transparent transparent $color transparent;
    }

    @else if $directions == (bottom) {
        $width : $h $w/2 0 $w/2;
        $colors : $color transparent transparent transparent;
    }

    @else if $directions == (bottom left) or $directions == (left bottom) {
        $width : $h 0 0 $w;
        $colors : transparent transparent transparent $color;
    }

    @else if $directions == (left) {
        $width : $h/2 $w $h/2 0;
        $colors : transparent $color transparent transparent;
    }

    @else if $directions == (top left) or $directions == (left top) {
        $width : $h $w 0 0;
        $colors : $color transparent transparent transparent;
    }

    @else {
        @warn 'Wrong directions : #{$directions}'
    }

    width: 0;
    height: 0;
    border: {
        style: $style;
        width: $width;
        color: $colors;
    }
}















