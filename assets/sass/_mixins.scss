



// ==========================================================================
// GRADIENT
// ==========================================================================

@mixin gradient( $direction, $values... ) {
    background: nth($values, 1);
    background: -webkit-linear-gradient($direction, $values);
    background: linear-gradient($direction, $values);
}




// ==========================================================================
// BORDER RADIUS
// ==========================================================================

@mixin borderRadius( $radius ) {
    border-radius: $radius;
}




// ==========================================================================
// BOX SHADOW
// ==========================================================================

@mixin boxShadow( $values... ) {
    box-shadow: $values;
}

@mixin noBoxShadow {
    box-shadow: none;
}




// ==========================================================================
// TEXT SHADOW
// ==========================================================================

@mixin textShadow( $values... ) {
    text-shadow: $values;
}
@mixin noTextShadow {
    text-shadow: none;
}




// ==========================================================================
// FILTER
// ==========================================================================

@mixin filter( $values... ) {
    -webkit-filter: $values;
    -moz-filter: $values;
    filter: $values;
}

@mixin blur( $blur ) {
    @include filter( blur( $blur ) );
}

@mixin grayscale( $grayscale ) {
    @include filter( grayscale( $grayscale ) );
}




// ==========================================================================
// TRANSITION
// ==========================================================================

@mixin transition( $values... ) {
    $transitions: ();


    @each $declaration in $values {

        @if $declaration == default {
            $declaration: all .2s;
        }

        $prop: nth($declaration, 1);
        $prop-opts: ();
        $length: length($declaration);

        @for $i from 2 through $length {
            $prop-opts: append($prop-opts, nth($declaration, $i));
        }

        $trans: ($prop, $prop-opts);
        $transitions: append($transitions, $trans, comma);
    }

    -webkit-transition: trans-prefix($transitions, webkit);
    -moz-transition: trans-prefix($transitions, moz);
    transition: $values;
}

@mixin noTransition {
    -webkit-transition: none !important;
    transition: none !important;
}




// ==========================================================================
// ANIMATION
// ==========================================================================

@mixin animation( $value ) {
    -webkit-animation: $value;
    animation: $value;
}




// ==========================================================================
// TRANSFORM
// ==========================================================================

@mixin transform( $val ) {
    -webkit-transform:$val;
    -ms-transform:$val;
    transform:$val;
}

@mixin translate( $x, $y ) {
    @include transform( translate( $x, $y ) );
}

@mixin translate3D( $x, $y, $z ) {
    @include transform( translate3d( $x, $y, $z ) );
}

@mixin scale( $ratio ) {
    @include transform( scale( $ratio ) );
}

@mixin rotate( $deg ) {
    @include transform( rotate( $deg ) );
}




// ==========================================================================
// OPACITY
// ==========================================================================

@mixin opacity( $value ) {
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="$value * 100")";
    filter: alpha(opacity= $value * 100 );
    zoom: 1;
}




// ==========================================================================
// FONT FACE
// ==========================================================================

@mixin fontFace( $name, $path : false, $weight : false, $svgid : false ) {

    @if $svgid == false {
        $svgid : $name;
    }

    @if $path == false {
        $path : $name;
    }

    @font-face{
        font-family : $name;

        src : url('/assets/fonts/#{$path}.eot');
        src : url('/assets/fonts/#{$path}.eot?') format('eot'),
              url('/assets/fonts/#{$path}.woff') format('woff'),
              url('/assets/fonts/#{$path}.svg##{$svgid}') format('svg'),
              url('/assets/fonts/#{$path}.ttf') format('truetype');

        @if $weight != false {
            font-weight: $weight;
        }
    }
}




// ==========================================================================
// TRUNCATE TEXTE
// ==========================================================================

@mixin ellipsis {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

@mixin ellipsisMulti( $font, $line, $number ) {
    display: block;
    display: -webkit-box;
    max-width: 100%;
    height: $font * $line * $number + px;
    font-size: $font + px;
    line-height: $line;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: $number;
    -webkit-box-orient: vertical;
}




// ==========================================================================
// HIDE TEXTE
// ==========================================================================

@mixin hideText {
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
}




// ==========================================================================
// BOX SIZING
// ==========================================================================

@mixin boxSizing( $value: border-box ) {
    -webkit-box-sizing: $value;
    -moz-box-sizing: $value;
    box-sizing: $value;
}




// ==========================================================================
// SIMPLE MEDIA QUERIES
// ==========================================================================

@mixin media( $value, $orientation : false, $operator: 'min-width', $type : 'screen' ) {

    @if $orientation != false and $operator != false {
        @media #{$type} and ( #{$operator} : #{$value} ) and ( orientation: #{$orientation} ) {
            @content;
        }

    } @else if $orientation != false and $operator == false {
        @media #{$type} and  ( orientation : #{$orientation} ) {
            @content;
        }

    } @else {
        @media #{$type} and ( #{$operator} : #{$value} ) {
            @content;
        }
    }

}


